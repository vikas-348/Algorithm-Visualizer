// import visualization libraries {
const { Tracer, Array1DTracer, Array2DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');
// }

const dimensions = [10, 20, 30, 40, 30]; // the dimensions of matrices to be multiplied
const n = dimensions.length - 1;
const A = new Array(n);
for (let i = 0; i < n; i++) {
  A[i] = new Array(n).fill(0);
}

// define tracer variables {
const tracer1 = new Array1DTracer('Matrix Dimensions');
const tracer2 = new Array2DTracer('Memo Table');
const logger = new LogTracer();
Layout.setRoot(new VerticalLayout([tracer1, tracer2, logger]));
tracer1.set(dimensions);
tracer2.set(A);
Tracer.delay();
// }

let i;
let j;
let k;
let len;

// Build the memo table in bottom up fashion
for (len = 2; len <= n; len++) {
  for (i = 1; i <= n - len + 1; i++) {
    j = i + len - 1;
    for (k = i; k <= j - 1; k++) {
      // visualize {
      tracer1.select(i - 1, j - 1);
      Tracer.delay();
      tracer2.select(i - 1, k - 1);
      Tracer.delay();
      tracer2.select(k, j - 1);
      Tracer.delay();
      // }

      const q = A[i - 1][k - 1] + A[k][j - 1] + dimensions[i - 1] * dimensions[k] * dimensions[j];

      // visualize {
      tracer1.deselect(i - 1, j - 1);
      tracer2.deselect(i - 1, k - 1);
      tracer2.deselect(k, j - 1);
      // }

      if (A[i - 1][j - 1] === 0 || q < A[i - 1][j - 1]) {
        A[i - 1][j - 1] = q;
        // visualize {
        tracer2.patch(i - 1, j - 1, A[i - 1][j - 1]);
        Tracer.delay();
        tracer2.depatch(i - 1, j - 1);
        // }
      }
    }
  }
}

// logger {
logger.println(`Minimum number of scalar multiplications required to multiply the matrices of dimensions ${dimensions.join('x')} is ${A[0][n-1]}`);
// }
